package org.nir.bookstore.entities;
// Generated 3 Dec 2020, 21:03:10 by Hibernate Tools 5.2.12.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Objects;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * BookOrder generated by hbm2java
 */
@Entity
@NamedQueries({ @NamedQuery(name = "BookOrder.findAll", 
				query = "SELECT bo FROM BookOrder bo ORDER BY bo.orderDate DESC"), 
				@NamedQuery(name="BookOrder.countAll",
				query = "SELECT COUNT(*) FROM BookOrder"),
				//Assignment 23
				  @NamedQuery(name = "BookOrder.countByCustomer", 
				  query = "SELECT COUNT(bo) FROM BookOrder bo " +
				  "WHERE bo.customer.customerId =: customerId"), 
				  @NamedQuery(name = "BookOrder.findByCustomer", 
								query = "SELECT bo FROM BookOrder bo "
							           + "WHERE bo.customer.customerId =: customerId "
							           + "ORDER BY bo.orderDate DESC"),
				  @NamedQuery(name = "BookOrder.findByIdAndCustomer", 
				  query = "SELECT bo FROM BookOrder bo " +
				  "WHERE bo.customer.customerId =: customerId "
				  + "AND bo.orderId =: orderId"),
				  @NamedQuery(name = "Order.listNew", 
					query = "SELECT bo FROM BookOrder bo ORDER BY bo.orderDate DESC"),
	})
@Table(name = "book_order", catalog = "bookstoredb")
public class BookOrder implements java.io.Serializable
{

	private Integer orderId;
	private Customer customer;
	private Date orderDate;
	private String addressLine1;
	private String addressLine2;
	private String firstname;
	private String lastname;
	private String phone;
	private String city;
	private String state;
	private String zipcode;
	private String country;
	private String paymentMethod;
	
	private float total;
	private float subtotal;
	private float shippingFee;
	private float tax;
	
	private String status;
	
	private Set<OrderDetail> orderDetails = new HashSet<OrderDetail>(0);

	public BookOrder()
	{
	}

	// I add this constructor for testing..
	public BookOrder(Integer orderId)
	{
		super();
		this.orderId = orderId;
	}

	public BookOrder(Customer customer, Date orderDate, String shippingAddress, String recipientName,
			String recipientPhone, String paymentMethod, float total, String status)
	{
		this.customer = customer;
		this.orderDate = orderDate;
		this.addressLine1 = shippingAddress;
		this.firstname = recipientName;
		this.phone = recipientPhone;
		this.paymentMethod = paymentMethod;
		this.total = total;
		this.status = status;
	}

	public BookOrder(Customer customer, Date orderDate, String shippingAddress, String recipientName,
			String recipientPhone, String paymentMethod, float total, String status, Set<OrderDetail> orderDetails)
	{
		this.customer = customer;
		this.orderDate = orderDate;
		this.addressLine1 = shippingAddress;
		this.firstname = recipientName;
		this.phone = recipientPhone;
		this.paymentMethod = paymentMethod;
		this.total = total;
		this.status = status;
		this.orderDetails = orderDetails;
	}
	
	@Column(name = "r_address_line2", nullable = false, length = 256)
	public String getAddressLine2()
	{
		return addressLine2;
	}

	public void setAddressLine2(String addressLine2)
	{
		this.addressLine2 = addressLine2;
	}

	@Column(name = "lastname", nullable = false, length = 30)
	public String getLastname()
	{
		return lastname;
	}
	
	public void setLastname(String lastname)
	{
		this.lastname = lastname;
	}
	
	@Column(name = "r_phone", nullable = false, length = 15)
	public String getPhone()
	{
		return phone;
	}

	public void setPhone(String phone)
	{
		this.phone = phone;
	}
	@Column(name = "r_city", nullable = false, length = 32)
	public String getCity()
	{
		return city;
	}

	public void setCity(String city)
	{
		this.city = city;
	}
	
	@Column(name = "r_state", nullable = false, length = 45)
	public String getState()
	{
		return state;
	}

	public void setState(String state)
	{
		this.state = state;
	}

	@Column(name = "r_zipcode", nullable = false, length = 24)
	public String getZipcode()
	{
		return zipcode;
	}

	public void setZipcode(String zipcode)
	{
		this.zipcode = zipcode;
	}

	@Column(name = "r_country", nullable = false, length = 4)
	public String getCountry()
	{
		return country;
	}

	public void setCountry(String country)
	{
		this.country = country;
	}

	@Column(name = "subtotal", nullable = false, precision = 12, scale = 0)
	public float getSubtotal()
	{
		return subtotal;
	}
	
	
	public void setSubtotal(float subtotal)
	{
		this.subtotal = subtotal;
	}

	
	@Column(name = "shipping_fee", nullable = false, precision = 12, scale = 0)
	public float getShippingFee()
	{
		return shippingFee;
	}
	
	
	public void setShippingFee(float shippingFee)
	{
		this.shippingFee = shippingFee;
	}
	
	@Column(name = "tax", nullable = false, precision = 12, scale = 0)
	public float getTax()
	{
		return tax;
	}

	public void setTax(float tax)
	{
		this.tax = tax;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "order_id", unique = true, nullable = false)
	public Integer getOrderId()
	{
		return this.orderId;
	}

	public void setOrderId(Integer orderId)
	{
		this.orderId = orderId;
	}

	// refers to the foreign key customer_id
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "customer_id", nullable = false)
	public Customer getCustomer()
	{
		return this.customer;
	}

	public void setCustomer(Customer customer)
	{
		this.customer = customer;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "order_date", nullable = false, length = 19)
	public Date getOrderDate()
	{
		return this.orderDate;
	}

	public void setOrderDate(Date orderDate)
	{
		this.orderDate = orderDate;
	}

	@Column(name = "r_address_line1", nullable = false, length = 256)
	public String getAddressLine1()
	{
		return this.addressLine1;
	}

	public void setAddressLine1(String addressLine1)
	{
		this.addressLine1 = addressLine1;
	}

	@Column(name = "r_firstname", nullable = false, length = 30)
	public String getFirstname()
	{
		return this.firstname;
	}

	public void setFirstname(String firstname)
	{
		this.firstname = firstname;
	}

	
	/*
	 * @Column(name = "recipient_phone", nullable = false, length = 15) public
	 * String getRecipientPhone() { return this.phone; }
	 * 
	 * public void setRecipientPhone(String recipientPhone) { this.phone =
	 * recipientPhone; }
	 */
	@Column(name = "payment_method", nullable = false, length = 20)
	public String getPaymentMethod()
	{
		return this.paymentMethod;
	}

	public void setPaymentMethod(String paymentMethod)
	{
		this.paymentMethod = paymentMethod;
	}

	
	@Column(name = "total", nullable = false, precision = 12, scale = 0)
	public float getTotal()
	{
		return this.total;
	}

	public void setTotal(float total)
	{
		this.total = total;
	}

	@Column(name = "status", nullable = false, length = 20)
	public String getStatus()
	{
		return this.status;
	}

	public void setStatus(String status)
	{
		this.status = status;
	}

	//refactoring : add cascade all and orphane = true
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "bookOrder", cascade = CascadeType.ALL, orphanRemoval = true)
	public Set<OrderDetail> getOrderDetails()
	{
		return this.orderDetails;
	}

	public void setOrderDetails(Set<OrderDetail> orderDetails)
	{
		this.orderDetails = orderDetails;
	}

	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((orderId == null) ? 0 : orderId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BookOrder other = (BookOrder) obj;
		if (orderId == null) {
			if (other.orderId != null)
				return false;
		} else if (!orderId.equals(other.orderId))
			return false;
		return true;
	}
	
	@Transient
	public int getBookCopies()
	{
		int totalCopies = 0 ; 
		Iterator<OrderDetail> iterator; 
		
		//loop over the set of OrderDetails and update the totalCopies by adding copy for each orderDetail
		iterator = this.orderDetails.iterator();
		
		while(iterator.hasNext()) 
		{
			totalCopies += iterator.next().getQuantity();
		}
		
		return totalCopies; 
	}
	
	//For order_detail.jsp page in the admin! PayPal...
		@Transient
		public String getCountryName()
		{
			return new Locale("", this.country).getDisplayCountry();
		}
	
	

	

}
